// do~while 사용
function solution(n) {
    let arr = [];
    do{
        arr.push(n%10);
        n = Math.floor(n/10); 
    } while(n>0);
    return arr;
}
// 정확성  테스트
// 테스트 1 〉	통과 (0.04ms, 30.4MB)
// 테스트 2 〉	통과 (0.04ms, 30.3MB)
// 테스트 3 〉	통과 (0.04ms, 30.3MB)
// 테스트 4 〉	통과 (0.05ms, 30.2MB)
// 테스트 5 〉	통과 (0.04ms, 30.1MB)
// 테스트 6 〉	통과 (0.05ms, 30.4MB)
// 테스트 7 〉	통과 (0.04ms, 30.3MB)
// 테스트 8 〉	통과 (0.04ms, 30.2MB)
// 테스트 9 〉	통과 (0.04ms, 30.3MB)
// 테스트 10 〉	통과 (0.04ms, 30.3MB)
// 테스트 11 〉	통과 (0.04ms, 30MB)
// 테스트 12 〉	통과 (0.04ms, 30.4MB)
// 테스트 13 〉	통과 (0.04ms, 30.3MB)


function solution(n) {
    const arr = String(n).split("").reverse();
    return arr.map((a)=>Number(a));
}
// 정확성  테스트
// 테스트 1 〉	통과 (0.14ms, 29.9MB)
// 테스트 2 〉	통과 (0.05ms, 30.3MB)
// 테스트 3 〉	통과 (0.05ms, 30MB)
// 테스트 4 〉	통과 (0.06ms, 30.2MB)
// 테스트 5 〉	통과 (0.08ms, 30.2MB)
// 테스트 6 〉	통과 (0.05ms, 30.2MB)
// 테스트 7 〉	통과 (0.07ms, 30.2MB)
// 테스트 8 〉	통과 (0.05ms, 30.2MB)
// 테스트 9 〉	통과 (0.07ms, 30.1MB)
// 테스트 10 〉	통과 (0.10ms, 30.2MB)
// 테스트 11 〉	통과 (0.07ms, 30.3MB)
// 테스트 12 〉	통과 (0.05ms, 30.3MB)
// 테스트 13 〉	통과 (0.05ms, 30.1MB)